{"version":3,"file":"566.2624570b.chunk.js","mappings":"mMAee,SAASA,EAAT,GAQL,IAR0B,SAClCC,EADkC,OAElCC,EAFkC,OAGlCC,EAHkC,MAIlCC,EAJkC,OAKlCC,EALkC,KAMlCC,EANkC,QAOlCC,GAAU,GACF,EACR,MAAMC,GAAeC,EAAAA,EAAAA,KAAOC,GAAUA,EAAMF,eAEtCG,EAAsBC,EAAAA,aACzBC,GACSC,IACDN,GACAD,GACAM,GACLA,EAAGC,EAAMC,aAAT,GAGJ,CAACP,EAAcD,EAASF,EAAQC,EAAMJ,EAAQC,EAAQC,IAGlDY,EAAuBJ,EAAAA,aAC1BC,GACSC,IACFN,GACCD,GACAM,IACLC,EAAMG,kBACNJ,EAAGC,GAAH,GAGJ,CAACN,EAAcD,EAASF,EAAQC,EAAMJ,EAAQC,EAAQC,IAGxD,OACE,gBAAC,KAAD,CACEc,cAAeP,EAAoBN,GACnCc,YAAaR,EAAoBL,GACjCJ,OAAQS,EAAoBT,GAC5BkB,QAAST,EAAoBR,GAC7BkB,OAAQV,EAAoBP,IAE5B,yBACEkB,cAAeN,EAAqBX,GACpCkB,YAAaP,EAAqBV,GAClCkB,cAAeR,EAAqBd,GACpCuB,cAAeT,EAAqBb,GACpCuB,aAAcV,EAAqBZ,IAElCH,GAIR,C,sBCjEc,SAAS0B,IACtB,MAAOC,EAAMC,GAAWjB,EAAAA,UAAe,IAChCkB,EAAMC,GAAWnB,EAAAA,UAAe,IAChCoB,EAAUC,GAAerB,EAAAA,SAAe,CAAEsB,EAAG,EAAGC,EAAG,IAE1D,OACE,gCACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAOC,OAAQ,GAAK,aAAY,KAAOC,IAAK,KAC1C,gBAAC,IAAD,CACEC,MAAM,MACNF,OAAO,OACPG,gBAAgB,UAChBC,YAAaZ,EAAO,OAAS,MAC7Ba,SAAU,GACVC,UAAU,SACVC,cAAc,WAEhB,gBAAC,IAAD,CACEL,MAAM,MACNF,OAAO,OACPG,gBAAgB,UAChBC,YAAaV,EAAO,OAAS,KAC7BW,SAAU,GACVC,UAAU,SACVC,cAAc,WAEhB,gBAAC,IAAD,CACEL,MAAM,MACNF,OAAO,OACPG,gBAAgB,UAChBC,YAAW,aAAQR,EAASE,EAAjB,eAAyBF,EAASG,GAC7CM,SAAU,GACVC,UAAU,SACVC,cAAc,YAIlB,gBAAC3C,EAAD,CACEG,OAAQ,IAAM0B,GAAQ,GACtBzB,MAAO,IAAMyB,GAAQ,GACrBxB,OAAQ,IAAM0B,GAAQ,GACtBzB,KAAM,IAAMyB,GAAQ,GACpB7B,OAASa,IACPkB,EAAY,CACVC,EAAGU,WAAW7B,EAAa8B,MAAMX,EAAEY,QAAQ,IAC3CX,EAAGS,WAAW7B,EAAa8B,MAAMV,EAAEW,QAAQ,KAF7C,GAMF,gBAAC,IAAD,CACEP,gBAAgB,UAChBC,YAAY,mBACZG,cAAc,SACdD,UAAU,aAIhB,gBAAC,IAAD,CAAUK,SAAS,iBAGxB,C","sources":["webpack://react-xr-ui/./src/components/interaction.tsx","webpack://react-xr-ui/./examples/examples/interactions.tsx"],"sourcesContent":["import React from \"react\";\nimport type { Intersection } from \"three\";\nimport { Interactive, useXR, XRInteractionEvent } from \"@react-three/xr\";\nimport { ThreeEvent } from \"@react-three/fiber\";\n\ntype Props = {\n  children: React.ReactNode;\n  onMove?: (intersection: Intersection) => void;\n  onOver?: (intersection: Intersection) => void;\n  onOut?: (intersection: Intersection) => void;\n  onDown?: (intersection: Intersection) => void;\n  onUp?: (intersection: Intersection) => void;\n  enabled?: boolean;\n};\n\nexport default function Interaction({\n  children,\n  onMove,\n  onOver,\n  onOut,\n  onDown,\n  onUp,\n  enabled = true,\n}: Props) {\n  const isPresenting = useXR((state) => state.isPresenting);\n\n  const handleVrInteraction = React.useCallback(\n    (fn?: (intersection: Intersection) => void) => {\n      return (event: XRInteractionEvent) => {\n        if (!isPresenting) return;\n        if (!enabled) return;\n        if (!fn) return;\n        fn(event.intersection);\n      };\n    },\n    [isPresenting, enabled, onDown, onUp, onMove, onOver, onOut]\n  );\n\n  const handleWebInteraction = React.useCallback(\n    (fn?: (intersection: Intersection) => void) => {\n      return (event: ThreeEvent<PointerEvent>) => {\n        if (isPresenting) return;\n        if (!enabled) return;\n        if (!fn) return;\n        event.stopPropagation();\n        fn(event);\n      };\n    },\n    [isPresenting, enabled, onDown, onUp, onMove, onOver, onOut]\n  );\n\n  return (\n    <Interactive\n      onSelectStart={handleVrInteraction(onDown)}\n      onSelectEnd={handleVrInteraction(onUp)}\n      onMove={handleVrInteraction(onMove)}\n      onHover={handleVrInteraction(onOver)}\n      onBlur={handleVrInteraction(onOut)}\n    >\n      <group\n        onPointerDown={handleWebInteraction(onDown)}\n        onPointerUp={handleWebInteraction(onUp)}\n        onPointerMove={handleWebInteraction(onMove)}\n        onPointerOver={handleWebInteraction(onOver)}\n        onPointerOut={handleWebInteraction(onOut)}\n      >\n        {children}\n      </group>\n    </Interactive>\n  );\n}\n","import React from \"react\";\nimport { Interaction, Layer } from \"react-xr-ui\";\nimport Example from \"@/components/example\";\nimport ViewCode from \"@/components/view-code\";\n\nexport default function Interactions() {\n  const [over, setOver] = React.useState(false);\n  const [down, setDown] = React.useState(false);\n  const [position, setPosition] = React.useState({ x: 0, y: 0 });\n\n  return (\n    <>\n      <Example>\n        <Layer height={0.1} position-y={0.625} gap={0.05}>\n          <Layer\n            width=\"15%\"\n            height=\"100%\"\n            backgroundColor=\"#000000\"\n            textContent={over ? \"Over\" : \"Out\"}\n            fontSize={0.4}\n            textAlign=\"center\"\n            verticalAlign=\"middle\"\n          />\n          <Layer\n            width=\"15%\"\n            height=\"100%\"\n            backgroundColor=\"#000000\"\n            textContent={down ? \"Down\" : \"Up\"}\n            fontSize={0.4}\n            textAlign=\"center\"\n            verticalAlign=\"middle\"\n          />\n          <Layer\n            width=\"30%\"\n            height=\"100%\"\n            backgroundColor=\"#000000\"\n            textContent={`x: ${position.x} y: ${position.y}`}\n            fontSize={0.4}\n            textAlign=\"center\"\n            verticalAlign=\"middle\"\n          />\n        </Layer>\n\n        <Interaction\n          onOver={() => setOver(true)}\n          onOut={() => setOver(false)}\n          onDown={() => setDown(true)}\n          onUp={() => setDown(false)}\n          onMove={(intersection) => {\n            setPosition({\n              x: parseFloat(intersection.point.x.toFixed(2)),\n              y: parseFloat(intersection.point.y.toFixed(2)),\n            });\n          }}\n        >\n          <Layer\n            backgroundColor=\"crimson\"\n            textContent=\"Interact with me\"\n            verticalAlign=\"middle\"\n            textAlign=\"center\"\n          />\n        </Interaction>\n      </Example>\n      <ViewCode pathname=\"interactions\" />\n    </>\n  );\n}\n"],"names":["Interaction","children","onMove","onOver","onOut","onDown","onUp","enabled","isPresenting","useXR","state","handleVrInteraction","React","fn","event","intersection","handleWebInteraction","stopPropagation","onSelectStart","onSelectEnd","onHover","onBlur","onPointerDown","onPointerUp","onPointerMove","onPointerOver","onPointerOut","Interactions","over","setOver","down","setDown","position","setPosition","x","y","height","gap","width","backgroundColor","textContent","fontSize","textAlign","verticalAlign","parseFloat","point","toFixed","pathname"],"sourceRoot":""}